/*
 * generated by Xtext
 */
package edu.tum.cs.cadmos.language.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

import edu.tum.cs.cadmos.language.services.CadmosGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class CadmosFormatter extends AbstractDeclarativeFormatter {

	@Override
	protected void configureFormatting(FormattingConfig c) {
		final CadmosGrammarAccess g = (CadmosGrammarAccess) getGrammarAccess();

		c.setAutoLinewrap(80);

		for (final Pair<Keyword, Keyword> pair : g.findKeywordPairs("(", ")")) {
			c.setNoSpace().after(pair.getFirst());
			c.setNoSpace().before(pair.getSecond());
		}
		for (final Keyword comma : g.findKeywords(",")) {
			c.setNoSpace().before(comma);
		}

		// component
		c.setIndentationIncrement().after(
				g.getComponentAccess().getLeftCurlyBracketKeyword_3());
		c.setIndentationDecrement().before(
				g.getComponentAccess().getRightCurlyBracketKeyword_5());
		c.setLinewrap(2).before(g.getComponentAccess().getComponentKeyword_0());
		c.setLinewrap().after(
				g.getComponentAccess().getLeftCurlyBracketKeyword_3());
		c.setLinewrap().after(
				g.getComponentAccess().getRightCurlyBracketKeyword_5());

		c.setLinewrap().after(g.getComponentAccess().getElementsAssignment_4());

		// package, import
		c.setLinewrap(2).after(g.getModelAccess().getNameAssignment_0_1());
		c.setLinewrap().after(
				g.getImportAccess().getImportedNamespaceAssignment_1());

		// parameterAssignment
		c.setNoLinewrap().around(
				g.getParameterAssignmentAccess().getEqualsSignKeyword_1());

		// comments
		c.setLinewrap(0, 1, 2).before(g.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(g.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(g.getML_COMMENTRule());
	}
}
