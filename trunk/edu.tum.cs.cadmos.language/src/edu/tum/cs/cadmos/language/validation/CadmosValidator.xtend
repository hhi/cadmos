/*
 * generated by Xtext
 */
package edu.tum.cs.cadmos.language.validation

import com.google.inject.Inject
import edu.tum.cs.cadmos.language.cadmos.CadmosPackage
import edu.tum.cs.cadmos.language.cadmos.Cost
import edu.tum.cs.cadmos.language.cadmos.Costmodel
import edu.tum.cs.cadmos.language.cadmos.Mapping
import edu.tum.cs.cadmos.language.cadmos.Role
import edu.tum.cs.cadmos.language.cadmos.TargetCost
import edu.tum.cs.cadmos.language.extensions.ModelExtensions
import java.util.HashMap
import java.util.List
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.validation.Check

//import org.eclipse.xtext.validation.Check
/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class CadmosValidator extends AbstractCadmosValidator {

	@Inject extension ModelExtensions

	@Check
	def checkMappingsStartWithSoftwareComonentAndOutPort(Mapping m) {
		if (m.component != null && m.component.role != Role.SOFTWARE) {
			error('Mapped component must be a software component', CadmosPackage.Literals.MAPPING__COMPONENT)
		}
		if (m.component != null && m.port != null && m.port.inbound) {
			error('Mapped port must be an "out" port', CadmosPackage.Literals.MAPPING__PORT)
		}
	}

	@Check
	def checkTargetCostsHaveMatchingPlatformComponent(TargetCost c) {
		if(c.component == null) return void
		if (c.component.role == Role.SOFTWARE) {
			error('Target component must be a platform component (processing or bus)',
				CadmosPackage.Literals.TARGET_COST__COMPONENT)
		}
		val mapping = EcoreUtil2.getContainerOfType(c, Mapping)
		if(mapping == null) return void
		if (mapping.componentMapping && c.component.role == Role.BUS) {
			error('Target component for a software component mapping must have a "processing" role',
				CadmosPackage.Literals.TARGET_COST__COMPONENT)
		}
		if (mapping.portMapping && c.component.role == Role.PROCESSING) {
			error('Target component for a software port mapping must have a "bus" role',
				CadmosPackage.Literals.TARGET_COST__COMPONENT)
		}
	}

	@Check
	def checkEachCostIsDefinedOnlyOnceInGivenCostmodel(Costmodel costmodel) {
		val keyCosts = new HashMap<String, List<Cost>>
		for (c : costmodel.eAllContents.toIterable.filter(Cost)) {
			val key = c.qualifiedKey
			println(key)
			var costs = keyCosts.get(key)
			if (costs == null) {
				costs = newArrayList
				keyCosts.put(key, costs)
			}
			costs.add(c)
		}
		for (e : keyCosts.entrySet.filter[value.size > 1]) {
			for (c : e.value) {
				error('Multiple definitions for ' + e.key + ' found', c, CadmosPackage.Literals.COST__KEY)
			}
		}
	}
/*
 * 
 */
//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
}
