/*
 * generated by Xtext
 */
package edu.tum.cs.cadmos.language.generator

import com.google.inject.Inject
import edu.tum.cs.cadmos.language.cadmos.Component
import edu.tum.cs.cadmos.language.cadmos.Embedding
import edu.tum.cs.cadmos.language.cadmos.IntegerLiteral
import edu.tum.cs.cadmos.language.cadmos.Parameter
import edu.tum.cs.cadmos.language.cadmos.ParameterRef
import edu.tum.cs.cadmos.language.cadmos.Port
import edu.tum.cs.cadmos.language.cadmos.Value
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.emf.ecore.EObject
import edu.tum.cs.cadmos.language.cadmos.Model
import org.eclipse.xtext.EcoreUtil2
import edu.tum.cs.cadmos.common.Assert
import edu.tum.cs.cadmos.language.cadmos.PrimitiveTypeRef
import edu.tum.cs.cadmos.language.cadmos.TypeRef
import edu.tum.cs.cadmos.language.cadmos.PrimitiveTypes
import java.util.HashSet
import java.util.Set
import edu.tum.cs.cadmos.language.cadmos.EnumTypeRef

class CadmosGenerator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	Set<String> imports = new HashSet<String>
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		generateComponentBase(fsa)
		generatePortClass(fsa)
		for(c: resource.allContents.toIterable.filter(typeof(Component))) {
			fsa.generateFile(c.fullyQualifiedName.toString("/") + ".java", c.compile)
			imports.clear()
		}
	}
	
	
	def generateComponentBase(IFileSystemAccess access) { 
		access.generateFile("components/ComponentBase.java", compileComponentBase())
	}
	
	def String compileComponentBase() '''
		package components;
		
		import utils.Port;
		
		public abstract class ComponentBase {
			
			/**
			 * Sends the next message of {@link Port} <i>src</i> to the {@link Port} <i>dst</i>.
			 * If <i>src</i> doesn't have a message to send, nothing will happen.
			 */
			protected <T> void executeChannel(Port<T> src, Port<T> dst) {
				T element = src.getElement(0);
				
				if (element != null)
					dst.addElement(element, 0);
			}
			
		}
	'''
	
	
	def generatePortClass(IFileSystemAccess access) { 
		access.generateFile("utils/Port.java", compilePort())
	}
	
	
	def String compilePort() '''
		package utils;

		import java.util.ArrayList;
		
		public class Port<T> {
		
			/** The maximal number of elements the buffer can contain. */
			private static final int MAX_NR_OF_ELEMENTS = 1<<16;
			
			/** The buffer where the elements are stored. */
			private final ArrayList<T> buffer;
			
			/** The index to the first position in the current window. */
			private int first;
			
			/** The index to the last position in the current window. */
			private int last;
			
			/** The number of elements in a window. */
			private final int capacity;
			
			/** The rate of execution for this port. */
			private final int rate;
		
			/**
			 * The default constructor of a {@link Port} containing its maximal
			 * causality and rate of execution.
			 */
			public Port(int causality, int rate) {
				buffer = new ArrayList<>(MAX_NR_OF_ELEMENTS);
				first = 0;
				last = causality;
				capacity = causality;
				
				this.rate = rate;
			}
			
			/**
			 * Steps over to the next execution.
			 */
			public synchronized void doStep() {
				first = (first + rate) % MAX_NR_OF_ELEMENTS;
				last = (last + rate) % MAX_NR_OF_ELEMENTS;
			}
			
			/**
			 * Gets the element in position <i>ind</i> in the current window.
			 * @param ind where ind &ge; 0 and ind &lt; capacity
			 */
			public synchronized T getElement(int ind) {
				assert ind >= 0 && ind < capacity;
				
				int index = (first + ind) % MAX_NR_OF_ELEMENTS;
				return buffer.get(index);
			}
		
			/**
			 * Adds the element to the <i>ind</i>-th position in the next window.
			 * @param ind where ind &ge; 0 and ind &lt; capacity
			 */
			public synchronized void addElement(T element, int ind) {
				assert ind >= 0 && ind < capacity;
				
				int index = (first + rate + ind) % MAX_NR_OF_ELEMENTS;
				buffer.add(index, element);
			}
		
		}
	'''
	
	
	def Model model(Component c) {
		EcoreUtil2::getContainerOfType(c, typeof(Model))
	}
	
	
	def String primitiveTypeName(PrimitiveTypes t) {
		switch t {	
			case PrimitiveTypes::BOOLEAN : "Boolean"
			case PrimitiveTypes::INTEGER : "Integer"
			case PrimitiveTypes::REAL : "Float"
		}
	}
	
	
	def String typeName(TypeRef ref) {
		switch ref {
			PrimitiveTypeRef : ref.type.primitiveTypeName
			EnumTypeRef : ref.type.name
			default: "Object"
		}
	}
	
	
	def String identifier(EObject obj) {
		val nameFeature = obj.eClass.getEStructuralFeature("name")
		Assert::assertNotNull(nameFeature, "nameFeature")
		obj.eGet(nameFeature) as String
	}
	
	
	def String compileDecl(Port p) '''
	«if(p.eIsSet(p.eClass.getEStructuralFeature("cardinality"))) {
		'''public final Port<«p.typeRef.typeName»>[] «p.identifier»;'''
	} else {
		'''public final Port<«p.typeRef.typeName»> «p.identifier»;'''
	}»
	'''	
	
	
	def String compileDecl(Embedding e) '''
		«if(e.eIsSet(e.eClass.getEStructuralFeature("cardinality"))) {
			'''private final «e.component.name»[] «e.name»;'''
		} else {
			'''private final «e.component.name» «e.name»;'''
		}»
	'''


	def compileDecl(EList<Parameter> list) { 
		'''«FOR p : list BEFORE "private final int " SEPARATOR "\nprivate final int "»«p.name»;«ENDFOR»'''
	}

	def compileInitDefault(EList<Parameter> list) {
		'''«FOR p : list BEFORE "this." SEPARATOR "\nthis."»«p.name» = «p.value»;«ENDFOR»'''
	}

	def compileInit(EList<Parameter> list) { 
		'''«FOR p : list BEFORE "this." SEPARATOR "\nthis."»«p.name» = «p.name»;«ENDFOR»'''
	}

	def compileDeclArgument(EList<Parameter> list) { 
		'''«FOR p : list BEFORE "int " SEPARATOR ", int "»«p.name»«ENDFOR»'''
	}
	
	
	def compileInstantiation(Port p) '''
		«if(p.eIsSet(p.eClass.getEStructuralFeature("cardinality"))) {
			'''
			«p.identifier» = new Port[«p.cardinality.compile»];
			for(int i = 0; i < «p.cardinality.compile»; ++ i)
				«p.identifier»[i] = new Port<«p.typeRef.typeName»>(1, 1);
			'''
		} else {
			'''
			«p.identifier» = new Port<«p.typeRef.typeName»>(1, 1);
			'''
		}»
	'''
	
	
	def String article(String name) {
		if (name.startsWithVocal()) {
			return "an"
		}
		return "a"
	} 
	
	def boolean startsWithVocal(String s) {
		if (s.length == 0) return false
		val c = s.substring(0, 1).toLowerCase
		return (c.equals("a") || c.equals("e") || c.equals("i") || c.equals("o") || c.equals("u"))
	}
	
	
	def String addImport(Embedding e) {
		val s = "import " + e.component.model.fullyQualifiedName.toString(".") +  "." + e.component.name + ";"
		if (!imports.contains(e.component.model.fullyQualifiedName.toString(".") +  "." + e.component.name)) {
			imports.add(e.component.model.fullyQualifiedName.toString(".") +  "." + e.component.name)
			return s
		}
	}

	
	def compileInstantiation(Embedding e) '''
		«if(e.eIsSet(e.eClass.getEStructuralFeature("cardinality"))) {
			'''
			«e.name» = new «e.component.name»[«e.cardinality.compile»];
			for(int i = 0; i < «e.cardinality.compile»; ++ i)
				«e.name»[i] = new «e.component.name»(«FOR v : e.parameterValues SEPARATOR ", "»«v.compile»«ENDFOR»);
			'''
		} else {
			'''
			«e.name» = new «e.component.name»(«FOR v : e.parameterValues SEPARATOR ", "»«v.compile»«ENDFOR»);
			'''
		}»
	'''
	def compile(Value v) {
		if (v instanceof IntegerLiteral) {
			var IntegerLiteral il = v as IntegerLiteral
			'''«il.value»'''
		} else if (v instanceof ParameterRef) {
			var ParameterRef pr = v as ParameterRef
			'''«pr.parameter.name»'''
		}
	}

	
	def String compile(Component c) {
		imports.add(c.model.fullyQualifiedName.toString(".") + "." + c.name) 
		'''
		«val packageName = c.model.fullyQualifiedName»
		«IF packageName != null»
			package «packageName.toString(".")»;
		«ENDIF»
		
		import utils.*;
		import components.ComponentBase;
		«FOR e : c.elements»
				«switch e {
					Embedding : e.addImport
				}»
		«ENDFOR»
		
		public class «c.name» extends ComponentBase {
			
			«FOR e : c.elements»
				«switch e {
					Port : e.compileDecl
					Embedding : e.compileDecl
				}»
			«ENDFOR»
			«c.parameters.compileDecl»
			
			/**
			 * Constructor for embedding «c.name.article» <i>«c.name»</i>«IF !c.parameters.isEmpty» with arbitrary parameters«ENDIF».
			 «FOR p : c.parameters SEPARATOR "\n"»* @param «p.name» where «p.name» &ge; 0«ENDFOR»
			 */
			public «c.name»(«c.parameters.compileDeclArgument») {
				«FOR p : c.parameters»
					assert «p.name» >= 0;
				«ENDFOR»
				«c.parameters.compileInit»
				
				«FOR e : c.elements»
					«switch e {
						Port : e.compileInstantiation
						Embedding : e.compileInstantiation
					}»
				«ENDFOR»
			}
			
			«IF !c.parameters.empty »
			/**
			 * Default constructor for using «c.name.article» <i>«c.name»</i> with default parameters.
			 * <ul>
			 «FOR p : c.parameters SEPARATOR "\n"»*   <li> «p.name» = «p.value»«ENDFOR»
			 * </ul>
			 */
			public «c.name»() {
				this(«FOR p : c.parameters SEPARATOR ", "»«p.value»«ENDFOR»);
			}
			«ENDIF»
		}
	'''
	}
	
}